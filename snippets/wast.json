{
    "export-func": {
        "prefix": "exf",
        "body": "(export \"${1:name}\" (func $${2:label}))$3"
    },
    "export-memory": {
        "prefix": "exm",
        "body": "(export \"${1:name}\" (memory 0))$2"
    },
    "export-global": {
        "prefix": "exg",
        "body": "(export \"${1:name}\" (global $${2:label}))$3"
    },
    "export-table": {
        "prefix": "ext",
        "body": "(export \"${1:name}\" (table $${2:label}))$3"
    },
    "import-func": {
        "prefix": "imf",
        "body": "(import \"${1:module_str}\" \"${2:field_str}\" (func $${3:label} (param $4) (result $5)))$6"
    },
    "import-memory": {
        "prefix": "imm",
        "body": "(import \"${1:module_str}\" \"${2:field_str}\" (memory ${3:initial} ${4:maximum}))$5"
    },
    "import-global": {
        "prefix": "img",
        "body": "(import \"${1:module_str}\" \"${2:field_str}\" (global $${3:label} ${4:type}))$5"
    },
    "import-table": {
        "prefix": "imt",
        "body": "(import \"${1:module_str}\" \"${2:field_str}\" (table ${3:initial} ${4:maximum} anyfunc))$5"
    },
    "func": {
        "prefix": "fn",
        "body": "(func $${1:name} (param $2) (result $3)\n\t$4)"
    },
    "table": {
        "prefix": "tbl",
        "body": "(table ${1:initial} ${2:maximum} anyfunc)$3"
    },
    "assert_return": {
        "prefix": "assert_return",
        "body": "(assert_return (invoke \"${1:name}\" ${2:args}) (${3:expected}))$4"
    },
    "assert_return_nan": {
        "prefix": "assert_return_nan",
        "body": "(assert_return (invoke \"${1:name}\" ${2:args}))$3"
    },
    "assert_trap": {
        "prefix": "assert_trap",
        "body": "(assert_trap (invoke \"${1:name}\" ${2:args}) \"${3:message}\")$4"
    },
    "assert_invalid": {
        "prefix": "assert_invalid",
        "body": "(assert_invalid (invoke \"${1:name}\" ${2:args}) \"${3:message}\")$4"
    },
    "assert_exhaustion": {
        "prefix": "assert_exhaustion",
        "body": "(assert_exhaustion (invoke \"${1:name}\" ${2:args}) \"call stack exhausted\")$3"
    }
}